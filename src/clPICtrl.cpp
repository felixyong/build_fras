/*****************************************************************************************************************************
*                                                                                                                            *
*                                                                                       *
*                                                                                                                            *
******************************************************************************************************************************
*                                                                                                                            *
*                                                                                                                            *
*****************************************************************************************************************************/

/**
 * @file clPICtrl.cpp
 *
 * @brief A module-based PID controller implementation.
 *

 */

//----------------------------------------------------------------------------------------------------------------------------
// 1) INCLUDE FILES
//----------------------------------------------------------------------------------------------------------------------------
#include "unicos.h"
#include "clPICtrl.h"

//----------------------------------------------------------------------------------------------------------------------------
// 2) LOCAL ABBREVIATIONS AND CONSTANTS
//----------------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------------
// 3) LOCAL DATA STRUCTURES
//----------------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------------
// 4) LOCAL VARIABLES
//----------------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------------
// 5) GLOBAL VARIABLES
//----------------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------------
// 6) LOCAL FUNCTION PROTOTYPES
//----------------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------------
// 7) FUNCTIONS
//----------------------------------------------------------------------------------------------------------------------------

/****************************************************************************************************************************/
real32 clPICtrl::r32Control(real32 const r32ErrIn, bool const bBal, real32 const r32BalOut)
{
	//!< 1. Proportional term
	m_r32ePro = m_r32Kp*r32ErrIn;

	//!< 2. Tracking feedback operates when the chain is limiting: (controller unlimited output - saturated value)
	real32 const r32Tracking = m_r32Out - m_r32TrackingFb;

	//!< 3. Integral term, normal calculation with tracking or balancing
	if (!bBal)
	{
		m_r32eInt += m_r32Ki*(r32ErrIn - r32Tracking);	//! I-term with tracking anti-windup
	}
	else
	{
		m_r32eInt = r32BalOut - m_r32ePro;				//! Balancing of I-term is active
	}

	//!< 4. Sum of all terms
	m_r32Out = m_r32ePro + m_r32eInt;
	return m_r32Out;
}

/****************************************************************************************************************************/
void clPICtrl::vSetParams(real32 const Kp, real32 Ki, real32 const r32SampleInterval, bool const bAcademic)
{
    // Time-based parameters need to be adjusted to the sampling time.
    Ki = r32CalcCoeff(Ki, r32SampleInterval);

    if (bAcademic)
    {
        // In academic topology, P-term affects I- and D-terms too.
        Ki = Kp * Ki;
    }

    // Keep parameters in sync
    m_r32Kp = Kp;
    m_r32Ki = Ki;
}

/****************************************************************************************************************************/
real32 clPICtrl::r32CalcCoeff(real32 const r32Coeff, real32 const r32SampleInterval) const
{
    real32 const ZERO = 0.0f;
    if (r32Coeff > (1.999f * r32SampleInterval)) // 1.999 for Nyquist's law (2x sample time) for reasonable operation
    {
        return (r32SampleInterval / r32Coeff);
    }
    else
    {
        return ZERO;  // Otherwise return zero to set zero-coeff
    }
}

/****************************************************************************************************************************/
void clPICtrl::vUpdateTrackingTerm(real32 const r32TrackingFb)
{
    m_r32TrackingFb = r32TrackingFb;
}
